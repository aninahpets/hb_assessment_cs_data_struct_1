RUNTIME

Question 1: When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. You can think of the workload as the number of tasks required to complete a job. What determines the workload of figuring out whether your box of animal crackers contains an elephant?

Answer 1: O(n). You need to sort through each cracker individually one by one to find the elephant. For a bigger box of crackers, the worst-case search scenario (that the elephant would be the last cracker you'd pull out of the box) is correspondingly larger.

Question 2:
Order the following runtimes in ascending order by efficiency as n approaches infinity:
O(log n),
O(n2)
O(n log n)
O(n)
O(2n)
O(1)

Answer 2:
O(1)
O(log n)
O(n)
O(n log n)
O(n2)
O(2n)

STACKS AND QUEUES

Question 1: In the following cases, would a stack or queue be a more appropriate data structure?
    1. The process of loading and unloading pallets onto a flatbed truck - STACK
    2. Putting bottle caps on bottles of beer as they roll down an assembly line - QUEUE
    3. Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2) - QUEUE

Question 2: Describe two more situations where a queue would be an appropriate data structure.
    1. Processing electronic payments
    2. Sending loyalty rewards to customers

Question 3: Describe two more situations where a stack would be an appropriate data structure.
    1. Returning user's most recent purchases
    2. Stacking plates

LINKED LISTS

Question 1: Given the linked list below, which are the nodes? What is the data for each node? Where is the head? Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)

Answer 1: Nodes: Apple, Berry, Cherry
Apple's data is string "Apple", Berry's data is string "Berry", Cherry's data is string "Cherry"
The head is Apple, as indicated in the List object. The tail is Cherry, as it is the final node in the list - Berry's "next" data points to Cherry, and Cherry's "next" data points to None, indicating the end of the list.

Question 2: What’s the difference between doubly- and singly-linked lists?

Answer 2: A singly-linked list contains nodes with data pointing to the next item in the list. A doubly-linked list contains nodes with data pointing to both the next and previous item in the list, so the list can be traversed in both directions.

Question 3: Why is it faster to append to a linked list if we keep track of the tail as an attribute?

Answer 3: Because you can access the tail immediately if you know where it is stored in memory, rather than needing to traverse the list and check each node's next value until you identify the tail.

TREES

Question 1: Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burrito (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.

Answer 1: Food > Italian > Indian > Mexican > Lasagna > Pizza > Tikka Masala > Saag > Burrito

Question 2: Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.

Answer 2: Food > Italian > Lasagna > Pizza > Thin Crust > Chicago-style

Question 3: How is a binary search tree different from other trees?

Answer 3: It's divisible split on any single node - something will either be larger/smaller, warmer/colder, etc than the nodes above and below it. Each node can have a single parent node and 0-2 child nodes. It is ordered in such a way that it's efficient to search, and ideally balanced equally so half the nodes < than the root and half the nodes > the root.